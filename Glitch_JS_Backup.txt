require([
  "esri/Map",
  "esri/views/MapView",
  "esri/layers/GeoJSONLayer",
  "esri/widgets/Search",
  "esri/geometry/Extent",
  "esri/renderers/SimpleRenderer",
  "esri/symbols/SimpleFillSymbol",
  "esri/symbols/TextSymbol",
  "esri/layers/support/LabelClass",
  "esri/widgets/FeatureForm",
  "esri/widgets/FeatureTemplates",
  "esri/widgets/Expand"
], function(Map, MapView, GeoJSONLayer, Search, Extent, SimpleRenderer, SimpleFillSymbol, TextSymbol, LabelClass, FeatureForm, FeatureTemplates, Expand) {

  const geojsonUrl = "https://raw.githubusercontent.com/mrmapllc/Canada_Grids_Layers/main/grids.geojson"; // Your GeoJSON URL
  const updateUrl = "/update-geojson"; // Endpoint to handle GitHub updates

  let editedFeature;

  // Create the GeoJSONLayer
  const geojsonLayer = new GeoJSONLayer({
    url: geojsonUrl,
    outFields: ["*"],
    popupTemplate: {
      title: "{Grid}",
      content: getContent,
      outFields: ["Grid", "Rate"]
    },
    renderer: new SimpleRenderer({
      symbol: new SimpleFillSymbol({
        color: [0, 0, 0, 0], // 100% transparent fill
        outline: {
          color: [0, 0, 0, 1], // Black outline
          width: 1
        }
      })
    }),
    labelingInfo: [new LabelClass({
      symbol: new TextSymbol({
        color: "black",
        haloColor: "white",
        haloSize: "1px",
        font: {
          size: 10,
          family: "sans-serif"
        }
      }),
      labelPlacement: "center-center",
      labelExpressionInfo: {
        expression: "$feature.Grid"
      }
    })]
  });

  // Create the Map
  const map = new Map({
    basemap: "streets-vector", // Use streets-vector basemap
    layers: [geojsonLayer]
  });

  // Set the extent to Canada
  const canadaExtent = new Extent({
    xmin: -141, // Westernmost longitude
    ymin: 41, // Southernmost latitude
    xmax: -52, // Easternmost longitude
    ymax: 83 // Northernmost latitude
  });

  // Create the MapView
  const view = new MapView({
    container: "viewDiv",
    map: map,
    extent: canadaExtent // Set the initial extent to Canada
  });

  // Create the FeatureForm widget
  const featureForm = new FeatureForm({
    container: "formDiv",
    layer: geojsonLayer,
    fieldConfig: [
      {
        name: "Rate",
        label: "Rate"
      }
    ]
  });

  // Create an Expand widget for the FeatureForm
  const formExpand = new Expand({
    expandIconClass: "esri-icon-edit",
    expandTooltip: "Edit Attributes",
    view: view,
    content: featureForm
  });

  view.ui.add(formExpand, "top-right");

  // Create the Search widget
  const searchWidget = new Search({
    view: view,
    sources: [
      {
        layer: geojsonLayer,
        searchFields: ["Grid"],
        displayField: "Grid",
        exactMatch: false,
        outFields: ["*"],
        name: "Grid Search",
        placeholder: "Search by Grid"
      },
      {
        // Use default ArcGIS World Geocoding Service
        locator: {
          url: "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"
        },
        singleLineFieldName: "SingleLine",
        name: "Address Search",
        placeholder: "Search by Address"
      }
    ]
  });

  view.ui.add(searchWidget, {
    position: "top-left",
    index: 0
  });

  view.on("click", function(event) {
    view.hitTest(event).then(function(response) {
      const results = response.results.filter(function(result) {
        return result.graphic.layer === geojsonLayer;
      });

      if (results.length > 0) {
        const graphic = results[0].graphic;
        editedFeature = graphic;

        featureForm.feature = graphic;
        formExpand.expand();
        
        view.popup.open({
          title: graphic.attributes.Grid || "No Grid Name", // Use the "Grid" attribute as the title
          location: event.mapPoint,
          content: getContent(graphic)
        });
      }
    });
  });

  // Listen to the feature form's submit event
  featureForm.on("submit", function() {
    if (editedFeature) {
      // Grab updated attributes
      const updatedAttributes = featureForm.getValues();
      
      // Loop through updated attributes and assign to feature
      Object.keys(updatedAttributes).forEach(function(name) {
        editedFeature.attributes[name] = updatedAttributes[name];
      });

      // Apply edits
      const edits = {
        updateFeatures: [editedFeature]
      };
      geojsonLayer.applyEdits(edits).then(function() {
        formExpand.collapse();
      }).catch(function(error) {
        console.error("Error applying edits:", error);
      });
    }
  });

  geojsonLayer.on("edits", function(event) {
    const updatedFeatures = event.edits.updateFeatures;
    const addedFeatures = event.edits.addFeatures;
    const deletedFeatures = event.edits.deleteFeatures;

    if (updatedFeatures.length > 0 || addedFeatures.length > 0 || deletedFeatures.length > 0) {
      updateGeoJSON(updatedFeatures, addedFeatures, deletedFeatures);
    }
  });

  function getContent(graphic) {
    let content = "<table>";
    for (let key in graphic.attributes) {
      if (graphic.attributes.hasOwnProperty(key)) {
        content += `<tr><th>${key}</th><td>${graphic.attributes[key]}</td></tr>`;
      }
    }
    content += "</table>";
    return content;
  }

  function updateGeoJSON(updatedFeatures, addedFeatures, deletedFeatures) {
    fetch(geojsonUrl)
      .then(response => response.json())
      .then(data => {
        // Update existing features
        updatedFeatures.forEach(feature => {
          const index = data.features.findIndex(f => f.id === feature.id);
          if (index !== -1) {
            data.features[index].properties = feature.attributes;
          }
        });

        // Add new features
        addedFeatures.forEach(feature => {
          data.features.push({
            type: "Feature",
            geometry: feature.geometry,
            properties: feature.attributes
          });
        });

        // Remove deleted features
        deletedFeatures.forEach(feature => {
          const index = data.features.findIndex(f => f.id === feature.id);
          if (index !== -1) {
            data.features.splice(index, 1);
          }
        });

        saveGeoJSONToGitHub(data);
      })
      .catch(error => console.error("Error updating GeoJSON:", error));
  }

  function saveGeoJSONToGitHub(data) {
    fetch(updateUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
      console.log("Successfully updated GeoJSON on GitHub", result);
    })
    .catch(error => console.error("Error updating GeoJSON on GitHub:", error));
  }
});
